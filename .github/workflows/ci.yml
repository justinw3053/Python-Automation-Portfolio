# This is the name of our workflow, which will appear in the GitHub Actions tab.
name: Build, Terraform, and Push

# This specifies when the workflow should run.
# 'push' means it will run every time a commit is pushed to the 'main' branch.
on:
  push:
    branches:
      - main

# This defines a single job, which is a set of steps to be executed.
jobs:
  build-and-push:
    # This specifies the operating system the job will run on.
    runs-on: ubuntu-latest
    
    # This is a list of all the commands and actions the job will perform.
    steps:
      # Step 1: Check out the repository code.
      # This action checks out your code from the repository so the workflow can access it.
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials.
      # This action uses your stored GitHub secrets to set up temporary AWS credentials
      # on the runner, allowing subsequent commands to interact with your AWS account.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Step 3: Setup Terraform.
      # We install the Terraform CLI on the runner.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 4: Terraform Init.
      # The WORKING DIRECTORY is now corrected to point to the correct subdirectory.
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: './Stage4-IaC/terraform/Infrastructure as Code with Terraform'

      # Step 5: Terraform Apply.
      # The WORKING DIRECTORY is now corrected.
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: './Stage4-IaC/terraform/Infrastructure as Code with Terraform'

      # Step 6: Docker login.
      # This action logs in to our Amazon ECR repository.
      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: 043309349280.dkr.ecr.eu-central-1.amazonaws.com

      # Step 7: Build and tag the Docker image.
      # The WORKING DIRECTORY is now corrected to point to the flask_app subdirectory.
      - name: Build and tag the Docker image
        run: docker build -t my-flask-app .
        working-directory: './Stage4-IaC/flask_app'

      # Step 8: Push the image to ECR.
      # This step first tags the local image with the full ECR URI, then pushes it.
      - name: Push the image to ECR
        run: |
          docker tag my-flask-app:latest 043309349280.dkr.ecr.eu-central-1.amazonaws.com/my-flask-app:latest
          docker push 043309349280.dkr.ecr.eu-central-1.amazonaws.com/my-flask-app:latest